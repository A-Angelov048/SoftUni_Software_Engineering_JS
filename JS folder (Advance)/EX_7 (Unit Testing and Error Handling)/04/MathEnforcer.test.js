let expect = require('chai').expect;
let { mathEnforcer } = require('./MathEnforcer.js');

describe('test parameters', () => {
    it('test addFive para', () => {
        expect(mathEnforcer.addFive('string')).to.be.equal(undefined)
        expect(mathEnforcer.addFive(['1', '2', '3'])).to.be.equal(undefined)
        expect(mathEnforcer.addFive({ name: 'pesho' })).to.be.equal(undefined)
        expect(mathEnforcer.addFive(5)).to.be.equal(10)
        expect(mathEnforcer.addFive(-5)).to.be.equal(0)
        expect(mathEnforcer.addFive(-10)).to.be.equal(-5)
        expect(mathEnforcer.addFive(-2)).to.be.equal(3)
        expect(mathEnforcer.addFive(0)).to.be.equal(5)
        expect(mathEnforcer.addFive(4.5)).to.be.closeTo(9.5, 0.00001)
        expect(mathEnforcer.addFive(-6.5)).to.be.closeTo(-1.5, 0.00001)
    })
    it('test subtractTen para', () => {
        expect(mathEnforcer.subtractTen('string')).to.be.equal(undefined)
        expect(mathEnforcer.subtractTen([1, 2, 3])).to.be.equal(undefined)
        expect(mathEnforcer.subtractTen({ name: 'pesho' })).to.be.equal(undefined)
        expect(mathEnforcer.subtractTen(5)).to.be.equal(-5)
        expect(mathEnforcer.subtractTen(10)).to.be.equal(0)
        expect(mathEnforcer.subtractTen(15)).to.be.equal(5)
        expect(mathEnforcer.subtractTen(15.5)).to.be.closeTo(5.5, 0.00001)
        expect(mathEnforcer.subtractTen(5.5)).to.be.closeTo(-4.5, 0.00001)
        expect(mathEnforcer.subtractTen(-5.5)).to.be.closeTo(-15.5, 0.00001)
        expect(mathEnforcer.subtractTen(-10)).to.be.equal(-20)
        expect(mathEnforcer.subtractTen(0)).to.be.equal(-10)
    })
    it('test sum para', () => {
        expect(mathEnforcer.sum('string', 'name')).to.be.equal(undefined)
        expect(mathEnforcer.sum({ name: 'pesho' }, [1, 2, 3])).to.be.equal(undefined)
        expect(mathEnforcer.sum([1, 2, 3], { name: 'pesho' })).to.be.equal(undefined)
        expect(mathEnforcer.sum([1, 2, 3], 'pesho')).to.be.equal(undefined)
        expect(mathEnforcer.sum({ name: 'pesho' }, 'pesho')).to.be.equal(undefined)
        expect(mathEnforcer.sum({}, 1)).to.be.equal(undefined)
        expect(mathEnforcer.sum([], 1)).to.be.equal(undefined)
        expect(mathEnforcer.sum('pesho', 1)).to.be.equal(undefined)
        expect(mathEnforcer.sum(1, 'pesho')).to.be.equal(undefined)
        expect(mathEnforcer.sum(1, {})).to.be.equal(undefined)
        expect(mathEnforcer.sum(1, [])).to.be.equal(undefined)
        expect(mathEnforcer.sum(5, 5)).to.be.equal(10)
        expect(mathEnforcer.sum(5, 10)).to.be.equal(15)
        expect(mathEnforcer.sum(5, 10.5)).to.be.closeTo(15.5, 0.00001)
        expect(mathEnforcer.sum(-5, -5.5)).to.be.closeTo(-10.5, 0.00001)
        expect(mathEnforcer.sum(-5.5, 5)).to.be.closeTo(-0.5, 0.00001)
        expect(mathEnforcer.sum(-5.5, 7)).to.be.closeTo(1.5, 0.00001)
        expect(mathEnforcer.sum(5, -5.5)).to.be.closeTo(-0.5, 0.00001)
        expect(mathEnforcer.sum(7, -5.5)).to.be.closeTo(1.5, 0.00001)
        expect(mathEnforcer.sum(0, 0)).to.be.equal(0)
        expect(mathEnforcer.sum(-1, -1)).to.be.equal(-2)
        expect(mathEnforcer.sum(-1, 1)).to.be.equal(0)
        expect(mathEnforcer.sum(1, -1)).to.be.equal(0)
        expect(mathEnforcer.sum(1, -10)).to.be.equal(-9)
        expect(mathEnforcer.sum(-1, 10)).to.be.equal(9)
    })
})